diff --git a/server/auth.c b/server/auth.c
index 23c5065..2bf416f 100644
--- a/server/auth.c
+++ b/server/auth.c
@@ -76,6 +76,17 @@ bool auth_user(struct connection *pconn, char *username)
 {
   char tmpname[MAX_LEN_NAME] = "\0";
 
+#ifdef FREECIV_WEB
+  if (srvarg.server_password_enabled) {
+    char buffer[MAX_LEN_MSG];
+    fc_snprintf(buffer, sizeof(buffer), _("Enter password for this private game:"));
+    dsend_packet_authentication_req(pconn, AUTH_LOGIN_FIRST, buffer);
+    pconn->server.auth_settime = time(NULL);
+    return TRUE;      
+  }
+
+#endif /* FREECIV_WEB */
+
   /* assign the client a unique guest name/reject if guests aren't allowed */
   if (is_guest_name(username)) {
     if (srvarg.auth_allow_guests) {
@@ -166,6 +177,31 @@ bool auth_handle_reply(struct connection *pconn, char *password)
 {
   char msg[MAX_LEN_MSG];
 
+#ifdef FREECIV_WEB
+  if (srvarg.server_password_enabled) {
+    if (pconn->server.status == AS_ESTABLISHED) {
+      notify_conn(NULL, NULL, E_SETTING, ftc_server, 
+                  _("Server password already set."));
+    } else if (strncmp(srvarg.server_password, password, MAX_LEN_PASSWORD) == 0) {
+      establish_new_connection(pconn);
+    } else {
+      char buffer[MAX_LEN_MSG];
+      fc_snprintf(buffer, sizeof(buffer),
+                      _("Incorrect password entered. Please try again."));
+      dsend_packet_authentication_req(pconn, AUTH_LOGIN_FIRST, buffer);
+      pconn->server.auth_settime = time(NULL);
+    }
+    return TRUE;
+
+  } else {
+    srvarg.server_password_enabled = TRUE;
+    sz_strlcpy(srvarg.server_password, password);
+    notify_conn(NULL, NULL, E_SETTING, ftc_server, _("Server password set."));
+    return TRUE;
+  }
+#endif /* FREECIV_WEB */
+
+
   if (pconn->server.status == AS_REQUESTING_NEW_PASS) {
 
     /* check if the new password is acceptable */
diff --git a/server/connecthand.c b/server/connecthand.c
index 2d0e930..9468d53 100644
--- a/server/connecthand.c
+++ b/server/connecthand.c
@@ -430,7 +430,7 @@ bool handle_login_request(struct connection *pconn,
     dsend_packet_connect_msg(pconn, game.server.connectmsg);
   }
 
-  if (srvarg.auth_enabled) {
+  if (srvarg.auth_enabled || srvarg.server_password_enabled) {
     return auth_user(pconn, req->username);
   } else {
     sz_strlcpy(pconn->username, req->username);
diff --git a/server/srv_main.c b/server/srv_main.c
index ba500f9..ffa4c62 100644
--- a/server/srv_main.c
+++ b/server/srv_main.c
@@ -248,6 +248,7 @@ void srv_init(void)
   srvarg.auth_enabled = FALSE;
   srvarg.auth_allow_guests = FALSE;
   srvarg.auth_allow_newusers = FALSE;
+  srvarg.server_password_enabled = FALSE;
 
   /* mark as initialized */
   has_been_srv_init = TRUE;
diff --git a/server/srv_main.h b/server/srv_main.h
index 963e932..1a414c4 100644
--- a/server/srv_main.h
+++ b/server/srv_main.h
@@ -55,6 +55,8 @@ struct server_arguments {
   bool auth_enabled;            /* defaults to FALSE */
   bool auth_allow_guests;       /* defaults to FALSE */
   bool auth_allow_newusers;     /* defaults to FALSE */
+  bool server_password_enabled; /* defaults to FALSE */
+  char server_password[MAX_LEN_PASSWORD]; /* server password */
   enum announce_type announce;
   int fatal_assertions;         /* default to -1 (disabled). */
 };
